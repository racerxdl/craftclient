#include "protocol/packet/packetPool.h"

#include "protocol/packet/allpackets.h"

using namespace ProtoRock;
using namespace ProtoRock::Protocol;
using namespace Protocol::Packet;

PacketPool PacketPool::Pool;

PacketPool::PacketPool() {
    Register(PacketID::Login, [] { return std::make_shared<Login>(); });
    Register(PacketID::PlayStatus, [] { return std::make_shared<PlayStatus>(); });
    Register(PacketID::ServerToClientHandshake, [] { return std::make_shared<ServerToClientHandshake>(); });
    Register(PacketID::ClientToServerHandshake, [] { return std::make_shared<ClientToServerHandshake>(); });
    Register(PacketID::Disconnect, [] { return std::make_shared<RawPacket>(PacketID::Disconnect); });
    Register(PacketID::ResourcePacksInfo, [] { return std::make_shared<ResourcePacksInfo>(); });
    Register(PacketID::ResourcePackStack, [] { return std::make_shared<ResourcePackStack>(); });
    Register(PacketID::ResourcePackClientResponse, [] { return std::make_shared<ResourcePackClientResponse>(); });
    Register(PacketID::Text, [] { return std::make_shared<RawPacket>(PacketID::Text); });
    Register(PacketID::SetTime, [] { return std::make_shared<RawPacket>(PacketID::SetTime); });
    Register(PacketID::StartGame, [] { return std::make_shared<RawPacket>(PacketID::StartGame); });
    Register(PacketID::AddPlayer, [] { return std::make_shared<RawPacket>(PacketID::AddPlayer); });
    Register(PacketID::AddActor, [] { return std::make_shared<RawPacket>(PacketID::AddActor); });
    Register(PacketID::RemoveActor, [] { return std::make_shared<RawPacket>(PacketID::RemoveActor); });
    Register(PacketID::AddItemActor, [] { return std::make_shared<RawPacket>(PacketID::AddItemActor); });
    Register(PacketID::TakeItemActor, [] { return std::make_shared<RawPacket>(PacketID::TakeItemActor); });
    Register(PacketID::MoveActorAbsolute, [] { return std::make_shared<RawPacket>(PacketID::MoveActorAbsolute); });
    Register(PacketID::MovePlayer, [] { return std::make_shared<RawPacket>(PacketID::MovePlayer); });
    Register(PacketID::PassengerJump, [] { return std::make_shared<RawPacket>(PacketID::PassengerJump); });
    Register(PacketID::UpdateBlock, [] { return std::make_shared<RawPacket>(PacketID::UpdateBlock); });
    Register(PacketID::AddPainting, [] { return std::make_shared<RawPacket>(PacketID::AddPainting); });
    Register(PacketID::TickSync, [] { return std::make_shared<RawPacket>(PacketID::TickSync); });
    // --
    Register(PacketID::LevelEvent, [] { return std::make_shared<RawPacket>(PacketID::LevelEvent); });
    Register(PacketID::BlockEvent, [] { return std::make_shared<RawPacket>(PacketID::BlockEvent); });
    Register(PacketID::ActorEvent, [] { return std::make_shared<RawPacket>(PacketID::ActorEvent); });
    Register(PacketID::MobEffect, [] { return std::make_shared<RawPacket>(PacketID::MobEffect); });
    Register(PacketID::UpdateAttributes, [] { return std::make_shared<RawPacket>(PacketID::UpdateAttributes); });
    Register(PacketID::InventoryTransaction, [] { return std::make_shared<RawPacket>(PacketID::InventoryTransaction); });
    Register(PacketID::MobEquipment, [] { return std::make_shared<RawPacket>(PacketID::MobEquipment); });
    Register(PacketID::MobArmourEquipment, [] { return std::make_shared<RawPacket>(PacketID::MobArmourEquipment); });
    Register(PacketID::Interact, [] { return std::make_shared<RawPacket>(PacketID::Interact); });
    Register(PacketID::BlockPickRequest, [] { return std::make_shared<RawPacket>(PacketID::BlockPickRequest); });
    Register(PacketID::ActorPickRequest, [] { return std::make_shared<RawPacket>(PacketID::ActorPickRequest); });
    Register(PacketID::PlayerAction, [] { return std::make_shared<RawPacket>(PacketID::PlayerAction); });
    // --
    Register(PacketID::HurtArmour, [] { return std::make_shared<RawPacket>(PacketID::HurtArmour); });
    Register(PacketID::SetActorData, [] { return std::make_shared<RawPacket>(PacketID::SetActorData); });
    Register(PacketID::SetActorMotion, [] { return std::make_shared<RawPacket>(PacketID::SetActorMotion); });
    Register(PacketID::SetActorLink, [] { return std::make_shared<RawPacket>(PacketID::SetActorLink); });
    Register(PacketID::SetHealth, [] { return std::make_shared<RawPacket>(PacketID::SetHealth); });
    Register(PacketID::SetSpawnPosition, [] { return std::make_shared<RawPacket>(PacketID::SetSpawnPosition); });
    Register(PacketID::Animate, [] { return std::make_shared<RawPacket>(PacketID::Animate); });
    Register(PacketID::Respawn, [] { return std::make_shared<RawPacket>(PacketID::Respawn); });
    Register(PacketID::ContainerOpen, [] { return std::make_shared<RawPacket>(PacketID::ContainerOpen); });
    Register(PacketID::ContainerClose, [] { return std::make_shared<RawPacket>(PacketID::ContainerClose); });
    Register(PacketID::PlayerHotBar, [] { return std::make_shared<RawPacket>(PacketID::PlayerHotBar); });
    Register(PacketID::InventoryContent, [] { return std::make_shared<RawPacket>(PacketID::InventoryContent); });
    Register(PacketID::InventorySlot, [] { return std::make_shared<RawPacket>(PacketID::InventorySlot); });
    Register(PacketID::ContainerSetData, [] { return std::make_shared<RawPacket>(PacketID::ContainerSetData); });
    Register(PacketID::CraftingData, [] { return std::make_shared<RawPacket>(PacketID::CraftingData); });
    Register(PacketID::CraftingEvent, [] { return std::make_shared<RawPacket>(PacketID::CraftingEvent); });
    Register(PacketID::GUIDataPickItem, [] { return std::make_shared<RawPacket>(PacketID::GUIDataPickItem); });
    Register(PacketID::AdventureSettings, [] { return std::make_shared<RawPacket>(PacketID::AdventureSettings); });
    Register(PacketID::BlockActorData, [] { return std::make_shared<RawPacket>(PacketID::BlockActorData); });
    Register(PacketID::PlayerInput, [] { return std::make_shared<RawPacket>(PacketID::PlayerInput); });
    Register(PacketID::LevelChunk, [] { return std::make_shared<RawPacket>(PacketID::LevelChunk); });
    Register(PacketID::SetCommandsEnabled, [] { return std::make_shared<RawPacket>(PacketID::SetCommandsEnabled); });
    Register(PacketID::SetDifficulty, [] { return std::make_shared<RawPacket>(PacketID::SetDifficulty); });
    Register(PacketID::ChangeDimension, [] { return std::make_shared<RawPacket>(PacketID::ChangeDimension); });
    Register(PacketID::SetPlayerGameType, [] { return std::make_shared<RawPacket>(PacketID::SetPlayerGameType); });
    Register(PacketID::PlayerList, [] { return std::make_shared<RawPacket>(PacketID::PlayerList); });
    Register(PacketID::SimpleEvent, [] { return std::make_shared<RawPacket>(PacketID::SimpleEvent); });
    Register(PacketID::Event, [] { return std::make_shared<RawPacket>(PacketID::Event); });
    Register(PacketID::SpawnExperienceOrb, [] { return std::make_shared<RawPacket>(PacketID::SpawnExperienceOrb); });
    Register(PacketID::ClientBoundMapItemData, [] { return std::make_shared<RawPacket>(PacketID::ClientBoundMapItemData); });
    Register(PacketID::MapInfoRequest, [] { return std::make_shared<RawPacket>(PacketID::MapInfoRequest); });
    Register(PacketID::RequestChunkRadius, [] { return std::make_shared<RawPacket>(PacketID::RequestChunkRadius); });
    Register(PacketID::ChunkRadiusUpdated, [] { return std::make_shared<RawPacket>(PacketID::ChunkRadiusUpdated); });
    Register(PacketID::ItemFrameDropItem, [] { return std::make_shared<RawPacket>(PacketID::ItemFrameDropItem); });
    Register(PacketID::GameRulesChanged, [] { return std::make_shared<RawPacket>(PacketID::GameRulesChanged); });
    Register(PacketID::Camera, [] { return std::make_shared<RawPacket>(PacketID::Camera); });
    Register(PacketID::BossEvent, [] { return std::make_shared<RawPacket>(PacketID::BossEvent); });
    Register(PacketID::ShowCredits, [] { return std::make_shared<RawPacket>(PacketID::ShowCredits); });
    Register(PacketID::AvailableCommands, [] { return std::make_shared<RawPacket>(PacketID::AvailableCommands); });
    Register(PacketID::CommandRequest, [] { return std::make_shared<RawPacket>(PacketID::CommandRequest); });
    Register(PacketID::CommandBlockUpdate, [] { return std::make_shared<RawPacket>(PacketID::CommandBlockUpdate); });
    Register(PacketID::CommandOutput, [] { return std::make_shared<RawPacket>(PacketID::CommandOutput); });
    Register(PacketID::UpdateTrade, [] { return std::make_shared<RawPacket>(PacketID::UpdateTrade); });
    Register(PacketID::UpdateEquip, [] { return std::make_shared<RawPacket>(PacketID::UpdateEquip); });
    Register(PacketID::ResourcePackDataInfo, [] { return std::make_shared<RawPacket>(PacketID::ResourcePackDataInfo); });
    Register(PacketID::ResourcePackChunkData, [] { return std::make_shared<RawPacket>(PacketID::ResourcePackChunkData); });
    Register(PacketID::ResourcePackChunkRequest, [] { return std::make_shared<RawPacket>(PacketID::ResourcePackChunkRequest); });
    Register(PacketID::Transfer, [] { return std::make_shared<RawPacket>(PacketID::Transfer); });
    Register(PacketID::PlaySound, [] { return std::make_shared<RawPacket>(PacketID::PlaySound); });
    Register(PacketID::StopSound, [] { return std::make_shared<RawPacket>(PacketID::StopSound); });
    Register(PacketID::SetTitle, [] { return std::make_shared<RawPacket>(PacketID::SetTitle); });
    Register(PacketID::AddBehaviourTree, [] { return std::make_shared<RawPacket>(PacketID::AddBehaviourTree); });
    Register(PacketID::StructureBlockUpdate, [] { return std::make_shared<RawPacket>(PacketID::StructureBlockUpdate); });
    Register(PacketID::ShowStoreOffer, [] { return std::make_shared<RawPacket>(PacketID::ShowStoreOffer); });
    Register(PacketID::PurchaseReceipt, [] { return std::make_shared<RawPacket>(PacketID::PurchaseReceipt); });
    Register(PacketID::PlayerSkin, [] { return std::make_shared<RawPacket>(PacketID::PlayerSkin); });
    Register(PacketID::SubClientLogin, [] { return std::make_shared<RawPacket>(PacketID::SubClientLogin); });
    Register(PacketID::AutomationClientConnect, [] { return std::make_shared<RawPacket>(PacketID::AutomationClientConnect); });
    Register(PacketID::SetLastHurtBy, [] { return std::make_shared<RawPacket>(PacketID::SetLastHurtBy); });
    Register(PacketID::BookEdit, [] { return std::make_shared<RawPacket>(PacketID::BookEdit); });
    Register(PacketID::NPCRequest, [] { return std::make_shared<RawPacket>(PacketID::NPCRequest); });
    Register(PacketID::PhotoTransfer, [] { return std::make_shared<RawPacket>(PacketID::PhotoTransfer); });
    Register(PacketID::ModalFormRequest, [] { return std::make_shared<RawPacket>(PacketID::ModalFormRequest); });
    Register(PacketID::ModalFormResponse, [] { return std::make_shared<RawPacket>(PacketID::ModalFormResponse); });
    Register(PacketID::ServerSettingsRequest, [] { return std::make_shared<RawPacket>(PacketID::ServerSettingsRequest); });
    Register(PacketID::ServerSettingsResponse, [] { return std::make_shared<RawPacket>(PacketID::ServerSettingsResponse); });
    Register(PacketID::ShowProfile, [] { return std::make_shared<RawPacket>(PacketID::ShowProfile); });
    Register(PacketID::SetDefaultGameType, [] { return std::make_shared<RawPacket>(PacketID::SetDefaultGameType); });
    Register(PacketID::RemoveObjective, [] { return std::make_shared<RawPacket>(PacketID::RemoveObjective); });
    Register(PacketID::SetDisplayObjective, [] { return std::make_shared<RawPacket>(PacketID::SetDisplayObjective); });
    Register(PacketID::SetScore, [] { return std::make_shared<RawPacket>(PacketID::SetScore); });
    Register(PacketID::LabTable, [] { return std::make_shared<RawPacket>(PacketID::LabTable); });
    Register(PacketID::UpdateBlockSynced, [] { return std::make_shared<RawPacket>(PacketID::UpdateBlockSynced); });
    Register(PacketID::MoveActorDelta, [] { return std::make_shared<RawPacket>(PacketID::MoveActorDelta); });
    Register(PacketID::SetScoreboardIdentity, [] { return std::make_shared<RawPacket>(PacketID::SetScoreboardIdentity); });
    Register(PacketID::SetLocalPlayerAsInitialised, [] { return std::make_shared<SetLocalPlayerAsInitialised>(); });
    Register(PacketID::UpdateSoftEnum, [] { return std::make_shared<RawPacket>(PacketID::UpdateSoftEnum); });
    Register(PacketID::NetworkStackLatency, [] { return std::make_shared<RawPacket>(PacketID::NetworkStackLatency); });
    // --
    Register(PacketID::ScriptCustomEvent, [] { return std::make_shared<RawPacket>(PacketID::ScriptCustomEvent); });
    Register(PacketID::SpawnParticleEffect, [] { return std::make_shared<RawPacket>(PacketID::SpawnParticleEffect); });
    Register(PacketID::AvailableActorIdentifiers, [] { return std::make_shared<RawPacket>(PacketID::AvailableActorIdentifiers); });
    // --
    Register(PacketID::NetworkChunkPublisherUpdate, [] { return std::make_shared<RawPacket>(PacketID::NetworkChunkPublisherUpdate); });
    Register(PacketID::BiomeDefinitionList, [] { return std::make_shared<RawPacket>(PacketID::BiomeDefinitionList); });
    Register(PacketID::LevelSoundEvent, [] { return std::make_shared<RawPacket>(PacketID::LevelSoundEvent); });
    Register(PacketID::LevelEventGeneric, [] { return std::make_shared<RawPacket>(PacketID::LevelEventGeneric); });
    Register(PacketID::LecternUpdate, [] { return std::make_shared<RawPacket>(PacketID::LecternUpdate); });
    // --
    Register(PacketID::AddEntity, [] { return std::make_shared<RawPacket>(PacketID::AddEntity); });
    Register(PacketID::RemoveEntity, [] { return std::make_shared<RawPacket>(PacketID::RemoveEntity); });
    Register(PacketID::ClientCacheStatus, [] { return std::make_shared<ClientCacheStatus>(); });
    Register(PacketID::MapCreateLockedCopy, [] { return std::make_shared<RawPacket>(PacketID::MapCreateLockedCopy); });
    Register(PacketID::OnScreenTextureAnimation, [] { return std::make_shared<RawPacket>(PacketID::OnScreenTextureAnimation); });
    Register(PacketID::StructureTemplateDataRequest, [] { return std::make_shared<RawPacket>(PacketID::StructureTemplateDataRequest); });
    Register(PacketID::StructureTemplateDataResponse, [] { return std::make_shared<RawPacket>(PacketID::StructureTemplateDataResponse); });
    // --
    Register(PacketID::ClientCacheBlobStatus, [] { return std::make_shared<RawPacket>(PacketID::ClientCacheBlobStatus); });
    Register(PacketID::ClientCacheMissResponse, [] { return std::make_shared<RawPacket>(PacketID::ClientCacheMissResponse); });
    Register(PacketID::EducationSettings, [] { return std::make_shared<RawPacket>(PacketID::EducationSettings); });
    Register(PacketID::Emote, [] { return std::make_shared<RawPacket>(PacketID::Emote); });
    Register(PacketID::MultiPlayerSettings, [] { return std::make_shared<RawPacket>(PacketID::MultiPlayerSettings); });
    Register(PacketID::SettingsCommand, [] { return std::make_shared<RawPacket>(PacketID::SettingsCommand); });
    Register(PacketID::AnvilDamage, [] { return std::make_shared<RawPacket>(PacketID::AnvilDamage); });
    Register(PacketID::CompletedUsingItem, [] { return std::make_shared<RawPacket>(PacketID::CompletedUsingItem); });
    Register(PacketID::NetworkSettings, [] { return std::make_shared<RawPacket>(PacketID::NetworkSettings); });
    Register(PacketID::PlayerAuthInput, [] { return std::make_shared<RawPacket>(PacketID::PlayerAuthInput); });
    Register(PacketID::CreativeContent, [] { return std::make_shared<RawPacket>(PacketID::CreativeContent); });
    Register(PacketID::PlayerEnchantOptions, [] { return std::make_shared<RawPacket>(PacketID::PlayerEnchantOptions); });
    Register(PacketID::ItemStackRequest, [] { return std::make_shared<RawPacket>(PacketID::ItemStackRequest); });
    Register(PacketID::ItemStackResponse, [] { return std::make_shared<RawPacket>(PacketID::ItemStackResponse); });
    Register(PacketID::PlayerArmourDamage, [] { return std::make_shared<RawPacket>(PacketID::PlayerArmourDamage); });
    Register(PacketID::CodeBuilder, [] { return std::make_shared<RawPacket>(PacketID::CodeBuilder); });
    Register(PacketID::UpdatePlayerGameType, [] { return std::make_shared<RawPacket>(PacketID::UpdatePlayerGameType); });
    Register(PacketID::EmoteList, [] { return std::make_shared<RawPacket>(PacketID::EmoteList); });
    Register(PacketID::PositionTrackingDBServerBroadcast, [] { return std::make_shared<RawPacket>(PacketID::PositionTrackingDBServerBroadcast); });
    Register(PacketID::PositionTrackingDBClientRequest, [] { return std::make_shared<RawPacket>(PacketID::PositionTrackingDBClientRequest); });
    Register(PacketID::DebugInfo, [] { return std::make_shared<RawPacket>(PacketID::DebugInfo); });
    Register(PacketID::PacketViolationWarning, [] { return std::make_shared<RawPacket>(PacketID::PacketViolationWarning); });
    Register(PacketID::MotionPredictionHints, [] { return std::make_shared<RawPacket>(PacketID::MotionPredictionHints); });
    Register(PacketID::AnimateEntity, [] { return std::make_shared<RawPacket>(PacketID::AnimateEntity); });
    Register(PacketID::CameraShake, [] { return std::make_shared<RawPacket>(PacketID::CameraShake); });
    Register(PacketID::PlayerFog, [] { return std::make_shared<RawPacket>(PacketID::PlayerFog); });
    Register(PacketID::CorrectPlayerMovePrediction, [] { return std::make_shared<RawPacket>(PacketID::CorrectPlayerMovePrediction); });
    Register(PacketID::ItemComponent, [] { return std::make_shared<RawPacket>(PacketID::ItemComponent); });
    Register(PacketID::FilterText, [] { return std::make_shared<RawPacket>(PacketID::FilterText); });
    Register(PacketID::ClientBoundDebugRenderer, [] { return std::make_shared<RawPacket>(PacketID::ClientBoundDebugRenderer); });
    Register(PacketID::SyncActorProperty, [] { return std::make_shared<RawPacket>(PacketID::SyncActorProperty); });
    Register(PacketID::AddVolumeEntity, [] { return std::make_shared<RawPacket>(PacketID::AddVolumeEntity); });
    Register(PacketID::RemoveVolumeEntity, [] { return std::make_shared<RawPacket>(PacketID::RemoveVolumeEntity); });
    Register(PacketID::SimulationType, [] { return std::make_shared<RawPacket>(PacketID::SimulationType); });
    Register(PacketID::NPCDialogue, [] { return std::make_shared<RawPacket>(PacketID::NPCDialogue); });
    Register(PacketID::EducationResourceURI, [] { return std::make_shared<RawPacket>(PacketID::EducationResourceURI); });
    Register(PacketID::CreatePhoto, [] { return std::make_shared<RawPacket>(PacketID::CreatePhoto); });
    Register(PacketID::UpdateSubChunkBlocks, [] { return std::make_shared<RawPacket>(PacketID::UpdateSubChunkBlocks); });
    Register(PacketID::PhotoInfoRequest, [] { return std::make_shared<RawPacket>(PacketID::PhotoInfoRequest); });
    Register(PacketID::SubChunk, [] { return std::make_shared<RawPacket>(PacketID::SubChunk); });
    Register(PacketID::SubChunkRequest, [] { return std::make_shared<RawPacket>(PacketID::SubChunkRequest); });
    Register(PacketID::ClientStartItemCooldown, [] { return std::make_shared<RawPacket>(PacketID::ClientStartItemCooldown); });
    Register(PacketID::ScriptMessage, [] { return std::make_shared<RawPacket>(PacketID::ScriptMessage); });
    Register(PacketID::CodeBuilderSource, [] { return std::make_shared<RawPacket>(PacketID::CodeBuilderSource); });
}